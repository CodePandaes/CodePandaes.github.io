<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>swagger2的常用注解</title>
    <url>/2020/04/10/swagger2%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>hexo初体验-搭建博客教程</title>
    <url>/2020/03/06/hexo%E5%88%9D%E4%BD%93%E9%AA%8C-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>使用Hexo + Github的方式免费搭建自己的个人博客</p>
<a id="more"></a>

<h2 id="一-环境"><a href="#一-环境" class="headerlink" title="一.环境"></a>一.环境</h2><ol>
<li>node.js, npm</li>
<li>github账号</li>
<li>git</li>
</ol>
<hr>
<h2 id="二-搭建"><a href="#二-搭建" class="headerlink" title="二.搭建"></a>二.搭建</h2><ol>
<li><p>新建一个以你的github用户名为名字的仓库，等会把Hexo博客部署到github上之后就可以通过<code>你的用户名.github.io</code>访问你的个人博客啦</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200306100335.png"  alt=""></p>
</li>
<li><p>打开git bash输入命令npm install -g hexo 安装Hexo</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407225807.png"  alt=""></p>
</li>
<li><p>新建文件夹myHexo(名字任取，用来放Hexo博客相关文件)，并进入myHexo，输入命令hexo init，初始化成功后看到提示start blogging with hexo即成功，hexo会自动下载一些文件到这个目录，包括node_modules.(后续哪一步出错可以直接删掉myHexo文件夹再一次执行以上操作)</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407232749.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407232925.png"  alt=""></p>
</li>
<li><p>输入命令hexo g 生成静态文件，然后输入hexo s 开启本地预览服务，启动hexo博客，端口为4000，浏览器中输入localhost:4000即可打开博客，ctrl + c 关闭</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407233236.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407233222.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407233250.png"  alt=""></p>
</li>
<li><p>先进github复制仓库地址，再打开<code>_config.yml</code>配置文件，找到deploy相关设置，按如下配置</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408103602.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407234000.png"  alt=""></p>
</li>
<li><p>输入命令hexo d 推送到远端，输入github账号，密码(可提前设置sshkey)部署完成。然后通过<code>你的用户名.github.io</code>访问你的个人博客，此时博客就已经初步搭建好了</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407233357.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407233822.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407233836.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200407233858.png"  alt=""></p>
</li>
</ol>
<p>   如果你不满意主题，请移步<a href="/2020/03/06/hexo%E4%B8%BB%E9%A2%98icarus%E8%AE%BE%E7%BD%AE%E5%92%8Chexo%E8%AE%BE%E7%BD%AE/" title="hexo设置icarus主题">hexo设置icarus主题</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用的插件配置</title>
    <url>/2020/03/07/hexo%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>常用插件（icarus主题）：来必力评论插件，百度统计插件，bdshare分享插件</p>
<a id="more"></a>

<h2 id="来必力"><a href="#来必力" class="headerlink" title="来必力"></a>来必力</h2><ol>
<li><p>先去<a href="https://www.livere.com/" title="" target="">来必力官网</a>注册Livere账号，然后选择City免费版本，点击安装，在右上角管理页面中设置你的来必力名称和网站地址，生成安装代码，获取data-uid</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408103815.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408103824.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408103836.png"  alt=""></p>
</li>
<li><p>复制data-uid，打开主题icarus的配置文件_config.yml，找到comment评论插件设置type和uid，完成后执行命令hexo clean（清除缓存文件），然后执行hexo g（生成静态文件） 和hexo s （启动本地预览）,效果如下</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408103910.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408104029.png"  alt=""></p>
</li>
<li><p>回到来必力开启邮件提醒和设置评论登录平台</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408104202.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408104117.png"  alt=""></p>
</li>
</ol>
<hr>
<h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><ol>
<li><p>进入<a href="https://tongji.baidu.com/web/30005265/welcome/login" title="" target="">百度统计官网</a>注册账号，登录控制台添加自己的博客地址，然后复制统计代码和hm.js后面的id</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408104914.png"  alt=""></p>
</li>
<li><p>找到icarus配置文件_config.yml中的baidu-analytics下的tracking_id属性，把hm.js后面的id粘贴过去，再找到主题中对应的footer.ejs或其他主题的footer模板，再把统计代码复制到footer.ejs中，达到一处安装，全站皆有的效果，完成后执行命令hexo clean，hexo g和hexo s，最后hexo d部署到远端</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105035.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105043.png"  alt=""></p>
</li>
<li><p>检查代码是否安装成功</p>
<ul>
<li><p>打开代码安装自动检查是否成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105338.png"  alt=""></p>
</li>
<li><p>或者直接打开基础报告查看是否有访问数据，有则说明成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105353.png"  alt=""></p>
</li>
<li><p>或者打开你的博客，F12点击Network，然后F5刷新看到hm.js加载则说明安装成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105405.png"  alt=""></p>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="bdshare分享插件"><a href="#bdshare分享插件" class="headerlink" title="bdshare分享插件"></a>bdshare分享插件</h2><p>打开icarus主题配置文件_config.yml找到share，设置type为bdshare，刷新即生效，或者选择其他插件如：share.js，addtoany等，效果如下</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105429.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105440.png"  alt=""></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中@SpringBootApplication注解解析</title>
    <url>/2020/03/11/SpringBoot%E4%B8%AD-SpringBootApplication%E6%B3%A8%E8%A7%A3%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>为什么SpringBoot项目添加一个简简单单的注释就能实现诸多功能呢</p>
<a id="more"></a>

<h2 id="SpringBootApplication解密"><a href="#SpringBootApplication解密" class="headerlink" title="SpringBootApplication解密"></a>SpringBootApplication解密</h2><p>SpringBoot 2.0.6 版本为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(</span><br><span class="line">    excludeFilters &#x3D; &#123;@Filter(</span><br><span class="line">    type &#x3D; FilterType.CUSTOM,</span><br><span class="line">    classes &#x3D; &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), @Filter(</span><br><span class="line">    type &#x3D; FilterType.CUSTOM,</span><br><span class="line">    classes &#x3D; &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public @interface SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Target({ElementType.TYPE})：指明了修饰的这个注解的使用范围为类，接口或者枚举</li>
<li>@Retention(RetentionPolicy.RUNTIME)：指明修饰的注解的生存周期为运行级别保留，编译后的class文件中存在，在jvm运行时保留，可以被反射调用。</li>
<li>@Documented：指明修饰的注解，可以被例如javadoc此类的工具文档化</li>
<li>@Inherited：允许子类继承父类中的注解</li>
<li>@interface意思是声明一个注解，方法名对应参数名，返回值类型对应参数类型。<br>接下来的三个注解才是重中之重</li>
</ul>
<ol>
<li><p>@SpringBootConfiguration<br>点进去查看代码，发现@Configuration注解，原来是spring全家桶时代的注解，作用是申明一个配置类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Configuration</span><br><span class="line">public @interface SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Configuration点进去发现是@Component注解的实现，而@Component意思是把当前的配置类添加到spring容器中，表示是一个组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Component</span><br><span class="line">public @interface Configuration &#123;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation &#x3D; Component.class</span><br><span class="line">    )</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以这个注解没什么新东西</p>
</li>
<li><p>@ComponentScan<br>这个注解的主要作用就是，被该注解标识的类会被Spring的IOC容器纳入管理，比如@Controller，@Service，@Repository注解，查看其源码你会发现，他们中有一个共同的注解@Component，所以被它们注解的类会被Spring的IOC容器纳入管理</p>
</li>
</ol>
<ul>
<li>excludeFilters：按照规则排除某些包的扫描</li>
<li>includeFilters：按照规则只包含某些包的扫描<br>也没啥新东西，权当复习</li>
</ul>
<p>3.@EnableAutoConfiguration<br>@EnableAutoConfiguration的作用是启动自动配置，意思是Spring Boot会根据你添加的jar包来配置你项目的默认设置，比如你添加了Spring Boot提供的spring-boot-starter-web依赖，其中包含了Tomcat和Spring MVC，这个注释就会认为你正在开发一个Web应用程序，自动地帮你添加Web项目中所需要的Spring配置。<br>点进去查看代码，分析具体实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY &#x3D; &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@AutoConfigurationPackage：自动配置包<br>@Import({AutoConfigurationImportSelector.class})：它会把项目里面所有需要导入的组件以全类名的方式返回，将这些组件添加到容器中。而且会给容器中注入非常多的自动配置类，导入并配置好当前项目中所需要的组件。<br>这是如何实现的呢？进入AutoConfigurationImportSelector.class找到selectImports（）方法里面的getCandidateConfigurations（）方法</p>
<p><img src="/" class="lazyload" data-src="/images/QQ%E6%88%AA%E5%9B%BE20200309215246.png"  alt=""></p>
<p>然后进入getCandidateConfigurations方法找到loadFactoryNames方法，再进入loadFactoryNames方法找到loadSpringFactories（），里面有这段代码<strong>classLoader.getResources(“META-INF/spring.factories”)</strong>，表示去META-INF/spring.factories中寻找需要加载的自动配置类（xxxAutoConfiguration）</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408124911.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408124956.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125005.png"  alt=""></p>
<p>可以看到spring.factories中有很多以xxxAutoConfiguration命名的配置类<br>包括CacheAutoConfiguration和RabbitAutoConfiguration</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125018.png"  alt=""></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot场景启动器</title>
    <url>/2020/03/11/SpringBoot%E5%9C%BA%E6%99%AF%E5%90%AF%E5%8A%A8%E5%99%A8/</url>
    <content><![CDATA[<p>当我们使用SpringBoot搭建一个web项目的时候，并不需要我们单独导入spring-webmvc，spring-web的相关包和版本，仅仅一个spring-boot-starter-web启动器就解决了，这到底是为什么呢？</p>
<a id="more"></a>

<p>首先新建一个SpringBoot的web项目，打开pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>发现所有的SpringBoot的项目都会依赖于spring-boot-starter-parent这个父项目，ctrl+左键进入，再进入spring-boot-dependencies</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&gt;..&#x2F;..&#x2F;spring-boot-dependencies&lt;&#x2F;relativePath&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;activemq.version&gt;5.15.6&lt;&#x2F;activemq.version&gt;</span><br><span class="line">        &lt;antlr2.version&gt;2.7.7&lt;&#x2F;antlr2.version&gt;</span><br><span class="line">        &lt;appengine-sdk.version&gt;1.9.66&lt;&#x2F;appengine-sdk.version&gt;</span><br><span class="line">        &lt;artemis.version&gt;2.4.0&lt;&#x2F;artemis.version&gt;</span><br><span class="line">        &lt;aspectj.version&gt;1.8.13&lt;&#x2F;aspectj.version&gt;</span><br><span class="line">        &lt;assertj.version&gt;3.9.1&lt;&#x2F;assertj.version&gt;</span><br><span class="line">        &lt;atomikos.version&gt;4.0.6&lt;&#x2F;atomikos.version&gt;</span><br><span class="line">        &lt;bitronix.version&gt;2.1.4&lt;&#x2F;bitronix.version&gt;</span><br><span class="line">        &lt;build-helper-maven-plugin.version&gt;3.0.0&lt;&#x2F;build-helper-maven-plugin.version&gt;</span><br><span class="line">        &lt;byte-buddy.version&gt;1.7.11&lt;&#x2F;byte-buddy.version&gt;</span><br><span class="line">        &lt;caffeine.version&gt;2.6.2&lt;&#x2F;caffeine.version&gt;</span><br><span class="line">        &lt;cassandra-driver.version&gt;3.4.0&lt;&#x2F;cassandra-driver.version&gt;</span><br><span class="line">        &lt;classmate.version&gt;1.3.4&lt;&#x2F;classmate.version&gt;</span><br><span class="line">        &lt;commons-codec.version&gt;1.11&lt;&#x2F;commons-codec.version&gt;</span><br><span class="line">        &lt;commons-dbcp2.version&gt;2.2.0&lt;&#x2F;commons-dbcp2.version&gt;</span><br><span class="line">        &lt;commons-lang3.version&gt;3.7&lt;&#x2F;commons-lang3.version&gt;</span><br><span class="line">        &lt;commons-pool.version&gt;1.6&lt;&#x2F;commons-pool.version&gt;</span><br><span class="line">        &lt;commons-pool2.version&gt;2.5.0&lt;&#x2F;commons-pool2.version&gt;</span><br><span class="line">        &lt;couchbase-cache-client.version&gt;2.1.0&lt;&#x2F;couchbase-cache-client.version&gt;</span><br><span class="line">        &lt;couchbase-client.version&gt;2.5.9&lt;&#x2F;couchbase-client.version&gt;</span><br><span class="line">        &lt;derby.version&gt;10.14.2.0&lt;&#x2F;derby.version&gt;</span><br><span class="line">        &lt;dom4j.version&gt;1.6.1&lt;&#x2F;dom4j.version&gt;</span><br><span class="line">        &lt;dropwizard-metrics.version&gt;3.2.6&lt;&#x2F;dropwizard-metrics.version&gt;</span><br><span class="line">        &lt;ehcache.version&gt;2.10.5&lt;&#x2F;ehcache.version&gt;</span><br><span class="line">        &lt;ehcache3.version&gt;3.5.3&lt;&#x2F;ehcache3.version&gt;</span><br><span class="line">        &lt;elasticsearch.version&gt;5.6.12&lt;&#x2F;elasticsearch.version&gt;</span><br><span class="line">        &lt;embedded-mongo.version&gt;2.0.3&lt;&#x2F;embedded-mongo.version&gt;</span><br><span class="line">        &lt;exec-maven-plugin.version&gt;1.5.0&lt;&#x2F;exec-maven-plugin.version&gt;</span><br><span class="line">        &lt;flatten-maven-plugin.version&gt;1.0.1&lt;&#x2F;flatten-maven-plugin.version&gt;</span><br><span class="line">        &lt;flyway.version&gt;5.0.7&lt;&#x2F;flyway.version&gt;</span><br><span class="line">        &lt;freemarker.version&gt;2.3.28&lt;&#x2F;freemarker.version&gt;</span><br><span class="line">        &lt;git-commit-id-plugin.version&gt;2.2.5&lt;&#x2F;git-commit-id-plugin.version&gt;</span><br><span class="line">        &lt;glassfish-el.version&gt;3.0.0&lt;&#x2F;glassfish-el.version&gt;</span><br><span class="line">        &lt;groovy.version&gt;2.4.15&lt;&#x2F;groovy.version&gt;</span><br><span class="line">        &lt;gson.version&gt;2.8.5&lt;&#x2F;gson.version&gt;</span><br><span class="line">        &lt;h2.version&gt;1.4.197&lt;&#x2F;h2.version&gt;</span><br><span class="line">        &lt;hamcrest.version&gt;1.3&lt;&#x2F;hamcrest.version&gt;</span><br><span class="line">        &lt;hazelcast.version&gt;3.9.4&lt;&#x2F;hazelcast.version&gt;</span><br><span class="line">        &lt;hazelcast-hibernate5.version&gt;1.2.3&lt;&#x2F;hazelcast-hibernate5.version&gt;</span><br><span class="line">        &lt;hibernate.version&gt;5.2.17.Final&lt;&#x2F;hibernate.version&gt;</span><br><span class="line">        &lt;hibernate-jpa-2.1-api.version&gt;1.0.2.Final&lt;&#x2F;hibernate-jpa-2.1-api.version&gt;</span><br><span class="line">        &lt;hibernate-validator.version&gt;6.0.13.Final&lt;&#x2F;hibernate-validator.version&gt;</span><br><span class="line">        &lt;hikaricp.version&gt;2.7.9&lt;&#x2F;hikaricp.version&gt;</span><br><span class="line">        &lt;hsqldb.version&gt;2.4.1&lt;&#x2F;hsqldb.version&gt;</span><br><span class="line">        &lt;htmlunit.version&gt;2.29&lt;&#x2F;htmlunit.version&gt;</span><br><span class="line">        &lt;httpasyncclient.version&gt;4.1.4&lt;&#x2F;httpasyncclient.version&gt;</span><br><span class="line">        &lt;httpclient.version&gt;4.5.6&lt;&#x2F;httpclient.version&gt;</span><br><span class="line">        &lt;httpcore.version&gt;4.4.10&lt;&#x2F;httpcore.version&gt;</span><br><span class="line">        &lt;infinispan.version&gt;9.1.7.Final&lt;&#x2F;infinispan.version&gt;</span><br><span class="line">        &lt;influxdb-java.version&gt;2.9&lt;&#x2F;influxdb-java.version&gt;</span><br><span class="line">        &lt;jackson.version&gt;2.9.7&lt;&#x2F;jackson.version&gt;</span><br><span class="line">        &lt;janino.version&gt;3.0.10&lt;&#x2F;janino.version&gt;</span><br><span class="line">        &lt;javax-annotation.version&gt;1.3.2&lt;&#x2F;javax-annotation.version&gt;</span><br><span class="line">        &lt;javax-cache.version&gt;1.1.0&lt;&#x2F;javax-cache.version&gt;</span><br><span class="line">        &lt;javax-jaxb.version&gt;2.3.1&lt;&#x2F;javax-jaxb.version&gt;</span><br><span class="line">        &lt;javax-jms.version&gt;2.0.1&lt;&#x2F;javax-jms.version&gt;</span><br><span class="line">        &lt;javax-json.version&gt;1.1.3&lt;&#x2F;javax-json.version&gt;</span><br><span class="line">        &lt;javax-jsonb.version&gt;1.0&lt;&#x2F;javax-jsonb.version&gt;</span><br><span class="line">        &lt;javax-mail.version&gt;1.6.2&lt;&#x2F;javax-mail.version&gt;</span><br><span class="line">        &lt;javax-money.version&gt;1.0.3&lt;&#x2F;javax-money.version&gt;</span><br><span class="line">        &lt;javax-transaction.version&gt;1.2&lt;&#x2F;javax-transaction.version&gt;</span><br><span class="line">        &lt;javax-validation.version&gt;2.0.1.Final&lt;&#x2F;javax-validation.version&gt;</span><br><span class="line">        &lt;jaxen.version&gt;1.1.6&lt;&#x2F;jaxen.version&gt;</span><br><span class="line">        &lt;jaybird.version&gt;3.0.5&lt;&#x2F;jaybird.version&gt;</span><br><span class="line">        &lt;jboss-logging.version&gt;3.3.2.Final&lt;&#x2F;jboss-logging.version&gt;</span><br><span class="line">        &lt;jboss-transaction-spi.version&gt;7.6.0.Final&lt;&#x2F;jboss-transaction-spi.version&gt;</span><br><span class="line">        &lt;jdom2.version&gt;2.0.6&lt;&#x2F;jdom2.version&gt;</span><br><span class="line">        &lt;jedis.version&gt;2.9.0&lt;&#x2F;jedis.version&gt;</span><br><span class="line">        &lt;jersey.version&gt;2.26&lt;&#x2F;jersey.version&gt;</span><br><span class="line">        &lt;jest.version&gt;5.3.4&lt;&#x2F;jest.version&gt;</span><br><span class="line">        &lt;jetty.version&gt;9.4.12.v20180830&lt;&#x2F;jetty.version&gt;</span><br><span class="line">        &lt;jetty-el.version&gt;8.5.33&lt;&#x2F;jetty-el.version&gt;</span><br><span class="line">        &lt;jetty-jsp.version&gt;2.2.0.v201112011158&lt;&#x2F;jetty-jsp.version&gt;</span><br><span class="line">        &lt;jmustache.version&gt;1.14&lt;&#x2F;jmustache.version&gt;</span><br><span class="line">        &lt;jna.version&gt;4.5.2&lt;&#x2F;jna.version&gt;</span><br><span class="line">        &lt;joda-time.version&gt;2.9.9&lt;&#x2F;joda-time.version&gt;</span><br><span class="line">        &lt;johnzon.version&gt;1.1.10&lt;&#x2F;johnzon.version&gt;</span><br><span class="line">        &lt;johnzon-jsonb.version&gt;1.1.10&lt;&#x2F;johnzon-jsonb.version&gt;</span><br><span class="line">        &lt;jolokia.version&gt;1.5.0&lt;&#x2F;jolokia.version&gt;</span><br><span class="line">        &lt;jooq.version&gt;3.10.8&lt;&#x2F;jooq.version&gt;</span><br><span class="line">        &lt;jsonassert.version&gt;1.5.0&lt;&#x2F;jsonassert.version&gt;</span><br><span class="line">        &lt;json-path.version&gt;2.4.0&lt;&#x2F;json-path.version&gt;</span><br><span class="line">        &lt;jstl.version&gt;1.2&lt;&#x2F;jstl.version&gt;</span><br><span class="line">        &lt;jtds.version&gt;1.3.1&lt;&#x2F;jtds.version&gt;</span><br><span class="line">        &lt;junit.version&gt;4.12&lt;&#x2F;junit.version&gt;</span><br><span class="line">        &lt;junit-jupiter.version&gt;5.1.1&lt;&#x2F;junit-jupiter.version&gt;</span><br><span class="line">        &lt;junit-platform.version&gt;1.1.0&lt;&#x2F;junit-platform.version&gt;</span><br><span class="line">        &lt;kafka.version&gt;1.0.2&lt;&#x2F;kafka.version&gt;</span><br><span class="line">        &lt;kotlin.version&gt;1.2.51&lt;&#x2F;kotlin.version&gt;</span><br><span class="line">        &lt;lettuce.version&gt;5.0.5.RELEASE&lt;&#x2F;lettuce.version&gt;</span><br><span class="line">        &lt;liquibase.version&gt;3.5.5&lt;&#x2F;liquibase.version&gt;</span><br><span class="line">        &lt;log4j2.version&gt;2.10.0&lt;&#x2F;log4j2.version&gt;</span><br><span class="line">        &lt;logback.version&gt;1.2.3&lt;&#x2F;logback.version&gt;</span><br><span class="line">        &lt;lombok.version&gt;1.16.22&lt;&#x2F;lombok.version&gt;</span><br><span class="line">        &lt;mariadb.version&gt;2.2.6&lt;&#x2F;mariadb.version&gt;</span><br><span class="line">        &lt;maven-antrun-plugin.version&gt;1.8&lt;&#x2F;maven-antrun-plugin.version&gt;</span><br><span class="line">        &lt;maven-assembly-plugin.version&gt;3.1.0&lt;&#x2F;maven-assembly-plugin.version&gt;</span><br><span class="line">        &lt;maven-clean-plugin.version&gt;3.0.0&lt;&#x2F;maven-clean-plugin.version&gt;</span><br><span class="line">        &lt;maven-compiler-plugin.version&gt;3.7.0&lt;&#x2F;maven-compiler-plugin.version&gt;</span><br><span class="line">        &lt;maven-dependency-plugin.version&gt;3.0.2&lt;&#x2F;maven-dependency-plugin.version&gt;</span><br><span class="line">        &lt;maven-deploy-plugin.version&gt;2.8.2&lt;&#x2F;maven-deploy-plugin.version&gt;</span><br><span class="line">        &lt;maven-eclipse-plugin.version&gt;2.10&lt;&#x2F;maven-eclipse-plugin.version&gt;</span><br><span class="line">        &lt;maven-enforcer-plugin.version&gt;3.0.0-M2&lt;&#x2F;maven-enforcer-plugin.version&gt;</span><br><span class="line">        &lt;maven-failsafe-plugin.version&gt;2.21.0&lt;&#x2F;maven-failsafe-plugin.version&gt;</span><br><span class="line">        &lt;maven-help-plugin.version&gt;2.2&lt;&#x2F;maven-help-plugin.version&gt;</span><br><span class="line">        &lt;maven-install-plugin.version&gt;2.5.2&lt;&#x2F;maven-install-plugin.version&gt;</span><br><span class="line">        &lt;maven-invoker-plugin.version&gt;3.1.0&lt;&#x2F;maven-invoker-plugin.version&gt;</span><br><span class="line">        &lt;maven-jar-plugin.version&gt;3.0.2&lt;&#x2F;maven-jar-plugin.version&gt;</span><br><span class="line">        &lt;maven-javadoc-plugin.version&gt;3.0.1&lt;&#x2F;maven-javadoc-plugin.version&gt;</span><br><span class="line">        &lt;maven-resources-plugin.version&gt;3.0.2&lt;&#x2F;maven-resources-plugin.version&gt;</span><br><span class="line">        &lt;maven-shade-plugin.version&gt;2.4.3&lt;&#x2F;maven-shade-plugin.version&gt;</span><br><span class="line">        &lt;maven-site-plugin.version&gt;3.6&lt;&#x2F;maven-site-plugin.version&gt;</span><br><span class="line">        &lt;maven-source-plugin.version&gt;3.0.1&lt;&#x2F;maven-source-plugin.version&gt;</span><br><span class="line">        &lt;maven-surefire-plugin.version&gt;2.21.0&lt;&#x2F;maven-surefire-plugin.version&gt;</span><br><span class="line">        &lt;maven-war-plugin.version&gt;3.1.0&lt;&#x2F;maven-war-plugin.version&gt;</span><br><span class="line">        ......</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure>
<p>发现原来spring-boot-denpendencies才是管理所有依赖版本号的地方，类似于版本管理中心，<strong>所以我们导入的依赖默认是不需要版本的</strong></p>
<hr>
<h2 id="以spring-boot-starter-web启动器为例"><a href="#以spring-boot-starter-web启动器为例" class="headerlink" title="以spring-boot-starter-web启动器为例"></a>以spring-boot-starter-web启动器为例</h2><p>进入spring-boot-starter-web，可以发现spring-webmvc，spring-web等开发web项目必须的包，而版本号则交给spring-boot-denpendencies统一管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-boot-starter-tomcat&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.hibernate&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">	&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>starter</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot初体验</title>
    <url>/2020/03/11/SpringBoot%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>SpringBoot零基础上手体验</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在“Spring全家桶”时代，J2EE笨重的开发，繁多的配置，部署过程的繁琐以及大难度的第三方集成都给作为程序员的我们带来了极大的麻烦，于是在Spring的基础上应运而生了SpringBoot框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程，实现J2EE的一站式解决。</p>
<hr>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>使用 Spring 项目引导页面可以在几秒构建一个项目</li>
<li>应用直接打包成war包</li>
<li>约定大于配置，可以使用默认配置，但通过自己设置参数，即可摆脱这种方式</li>
<li>starter启动器自动依赖，监听，事物，连接池等都有集成好的starter直接使用</li>
<li>无需配置xml，无代码生成，开箱即用</li>
</ul>
<hr>
<h2 id="版本解读"><a href="#版本解读" class="headerlink" title="版本解读"></a>版本解读</h2><p>打开SpringBoot官网看到如下版本，建议使用GA版本</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408105930.png"  alt=""></p>
<ul>
<li>GA:General Availability,正式发布的版本，官方推荐使用此版本。在国外都是用GA来说明release版本的。</li>
<li>PRE: 预览版,内部测试版. 主要是给开发人员和测试人员测试和找BUG用的，不建议使用；</li>
<li>SNAPSHOT: 快照版，可以稳定使用，且仍在继续改进版本</li>
</ul>
<hr>
<h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><p>环境准备：</p>
<ul>
<li><p>IDEA2018</p>
</li>
<li><p>windows7<br>打开IDEA，new一个project，选择Spring Initializr（用来初始化一个Spring boot 的项目），不用手动添加web依赖包，选择组件即可</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408110025.png"  alt=""></p>
</li>
</ul>
<p>填写项目坐标</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408110040.png"  alt=""></p>
<p>添加web组件</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408110049.png"  alt=""></p>
<p>填写项目名finish</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111105.png"  alt=""></p>
<p>打开pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.study.helloword&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;study-helloword&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">&lt;!-- 这是Spring Boot的父级依赖，用来提供相关的Maven默认依赖。使用它之后，常用的包依赖可以省去version标签。 --&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.6.RELEASE&lt;&#x2F;version&gt;&lt;!-- 可以选择2.1.13或者2.25版本 --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">&lt;!-- 自动生成web依赖包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；无需在应用服务器安装tomcat--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
<p>编写HelloWorldController</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111125.png"  alt=""></p>
<p>打开启动类HelloWorldMainApplication，点击run启动项目</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111152.png"  alt=""></p>
<p>localhost:8080/hello访问成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111207.png"  alt=""></p>
<p>至此一个简单的springboot项目就搭建起来了。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot实现热部署</title>
    <url>/2020/03/11/SpringBoot%E5%AE%9E%E7%8E%B0%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>现在有了<strong>spring-boot-devtools</strong>启动器，能在SpringBoot的web开发中实现热部署</p>
<a id="more"></a>

<p>在实际开发过程中，每次修改后台代码就必须要重启来保证源代码或者配置文件的生效，特别是当下微服务开发火热，动不动同时启动多个微服务，debug一次耗时又费力，现在有了<strong>spring-boot-devtools</strong>启动器，能在SpringBoot的web开发中实现热部署，以下以IDEA为例其原理就是监听classpath路径下的文件变动，修改代码，立即重启.。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>IDEA中默认是不自动编译的，左上角打开setting设置Build project automatically自动编译功能</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408114200.png"  alt=""></p>
<ol start="2">
<li>ctrl + shift + alt + /,选择Registry,勾上 Compiler autoMake allow when app running</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408114219.png"  alt=""></p>
<ol start="3">
<li>打开pom.xml引入依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--实现工程热部署，修改代码不需要重启服务器--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;!--依赖不会传递，该项目依赖devtools；之后依赖此项目的项目如果想要使用devtools，需要重新引入--&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;&#x2F;fork&gt; &lt;!-- 如果没有该配置，devtools不会生效 --&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure></li>
<li>启动项目，控制台确实显示devtools在监听classpath路径下的文件变动</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408114236.png"  alt=""></p>
<ol start="5">
<li>修改UserController下的代码，发现console确实重启了项目，实现了热部署</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408114337.png"  alt=""></p>
<p>​    <img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408114358.png"  alt=""></p>
<ol start="6">
<li><p>devtools也可以单独监控某个文件夹下的文件，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devtools:</span><br><span class="line">  restart:</span><br><span class="line">    additional-paths: src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;user</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认开启热部署，可打开配置文件设置spring.devtools.restart.enable为false关闭</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  devtools:</span><br><span class="line">    restart:</span><br><span class="line">      # false: 热部署关闭</span><br><span class="line">      enabled: false</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>热部署</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合JDBC</title>
    <url>/2020/03/11/SpringBoot%E6%95%B4%E5%90%88JDBC/</url>
    <content><![CDATA[<p>连接数据库的方式有很多，比如Jpa（参考<a href="https://www.jianshu.com/p/dfe19558732a" target="_blank" rel="noopener">SpringBoot整合JPA</a>），Mybatis（参考<a href="https://www.jianshu.com/p/8bb9febbf14c" target="_blank" rel="noopener">SpringBoot整合Mybatis</a>），原生JDBC等，本文主要详细讲述借助JdbcTemplate来操作数据库</p>
<a id="more"></a>

<p>首先新建一个web工程，打开pom.xml引入相关依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--JDBC依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--mysql依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>配置数据库连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test_jdbc?serverTimezone&#x3D;UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>
<p>新建表tb_user，添加一条数据</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125132.png"  alt=""></p>
<p>新建实体类User</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    private String lastName;</span><br><span class="line"></span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">        return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">        this.lastName &#x3D; lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email &#x3D; email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现dao层，新建UserDao</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class UserDao &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    public List&lt;Map&lt;String, Object&gt;&gt; selectUser() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list &#x3D; jdbcTemplate.queryForList(&quot;select * from tb2_user&quot;);</span><br><span class="line">        if (list.size() &gt; 0) &#123;</span><br><span class="line">            return list;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了简单就省略service层，直接新建UserController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class Usercontroller &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public List&lt;Map&lt;String, Object&gt;&gt; insertUser() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list &#x3D; userDao.selectUser();</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动项目，浏览器输入localhost:8080/user，得到数据，整合成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125149.png"  alt=""></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合JPA</title>
    <url>/2020/03/11/SpringBoot%E6%95%B4%E5%90%88JPA/</url>
    <content><![CDATA[<p>SpringBoot整合JPA的详细教程</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们都知道一个概念ORM（Object Relational Mapping）对象关系映射，ORM的作用是在操作数据库之前，先把数据表与实体类关联起来，然后通过实体类的对象操作（增删改查）数据库表。所以，ORM是一个实现使用对象操作数据库的设计思想！！！ 通过这句话，我们知道JPA的作用就是通过对象操作数据库的，不用编写sql语句。</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112127.png"  alt=""></p>
<p>JPA和Hibernate、toplink的关系就像JDBC和mysql、Oracle驱动的关系一样，JPA是规范，Hibernate除了是ORM框架之外，它还是一种JPA的实现。而Spring Data JPA其实就是基于ORM框架封装了的Hibernate，可使得开发者用极简的代码即可实现对数据库的访问和操作，它提供了包括增删改查等常用功能，可以极大提高开发效率。</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112135.png"  alt=""></p>
<hr>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol>
<li>新建一个web项目（可以参考我的上一篇博客<a href="https://www.jianshu.com/p/84b4459060a1" target="_blank" rel="noopener">SpringBoot初体验</a>）打开pom.xml引入依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--只要和数据库有链接就会有JDBC的依赖包，所以导入了JPA就有了JDBC的依赖包不需要再导入了--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--引入web依赖包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--引入mysql依赖包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
打开配置文件application.yml，添加数据库配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jpa?serverTimezone&#x3D;UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">#能配置哪些属性在JpaProperties里面有绑定，参照即可</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      #更新或者创建数据表结构</span><br><span class="line">      ddl-auto: update</span><br><span class="line">      #控制台显示sql</span><br><span class="line">    show-sql: true</span><br></pre></td></tr></table></figure>
添加实体类User<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用JPA注解配置映射关系</span><br><span class="line">@Entity  &#x2F;&#x2F;告诉JPA这是一个实体类(和数据表映射的类)</span><br><span class="line">@Table(name &#x3D; &quot;tb2_user&quot;) &#x2F;&#x2F;@Table 来制定和那个数据表对应；若省略则对应小写的user</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Id &#x2F;&#x2F;这是一个主键</span><br><span class="line">    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)&#x2F;&#x2F;自增</span><br><span class="line">    private Integer id;</span><br><span class="line"></span><br><span class="line">    @Column(name &#x3D; &quot;last_name&quot;, length &#x3D; 50) &#x2F;&#x2F;这是和数据表对应的一个列，大小50</span><br><span class="line">    private String lastName;</span><br><span class="line"></span><br><span class="line">    @Column  &#x2F;&#x2F;省略：默认列名就是属性名</span><br><span class="line">    private String email;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">        return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">        this.lastName &#x3D; lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email &#x3D; email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
添加接口类UserRepository继承JpaRepository<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;继承JpaRepository&lt;User, Integer&gt; 完成对数据库的操作 &lt;实体类类名， 实体类主键的数据类型&gt;</span><br><span class="line">public interface UserRepository extends JpaRepository&lt;User, Integer&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
添加Controller层UserController<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class Usercontroller &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;不需要添加@Bean注入容器， 因为UserRepository本身就是 JPARepository</span><br><span class="line">    @Autowired</span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;user&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public User findUserById(@PathVariable(&quot;id&quot;) Integer id) &#123;</span><br><span class="line">        return userRepository.findById(id).orElse(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public User insertUser(User user) &#123;</span><br><span class="line">        User user1 &#x3D; userRepository.save(user);</span><br><span class="line">        return user1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
新建数据库jpa</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112211.png"  alt=""><br>启动项目会自动生成表tb2_user</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112235.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112251.png"  alt=""></p>
<p>浏览器输入localhost:8080/user?lastName=zhangsan 添加User对象成功，并查看数据库表</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112318.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112334.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112346.png"  alt=""></p>
<p>最后浏览器输入localhost:8080/user/1 得到json对象，测试成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112357.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112407.png"  alt=""></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Lombok及使用</title>
    <url>/2020/03/18/SpringBoot%E6%95%B4%E5%90%88Lombok%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Lombok项目是一个Java库，它会自动插入您的编辑器和构建工具中，从而为您的Java增光添彩。永远不要再编写另一个getter或equals方法，带有一个注释的类将具有功能全面的生成器，自动执行日志记录变量等等。</p>
<a id="more"></a>

<h2 id="下载和设置"><a href="#下载和设置" class="headerlink" title="下载和设置"></a>下载和设置</h2><p>首先打开IDEA中设置，找到plugin，搜索lombok，点击install下载并应用，最后记得重启IDEA。或者你也可以官网下载安装<a href="https://projectlombok.org/download" target="_blank" rel="noopener">https://projectlombok.org/download</a></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130203.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130213.png"  alt=""></p>
<p>添加注解支持 Annotation Processors</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130226.png"  alt=""></p>
<p>在 <a href="https://mvnrepository.com/?__cf_chl_jschl_tk__=ba9beb8e14c242589e6800edd85e48690d54caa8-1584501985-0-Ach1FIsgXHrZC_Yma8uQwtg2Ly5sQwDBmMa6-K_qHMyWqdfJh9gzFJZZAM3FAQadhMq3YuzdVi4VBmsYHnZh8qgb05mpYiGC8Ofc-9Owf1F5GIQH8dAifwxMgiU03n6u6uR8eUng54PnDL1naK6myWcoSvVbfg9P_o4HhHFT0vM0jnfJEVPYLyqXr7OIyAcNq3-ITKMa_AXUWmCD0F6if_4eAkPCZNdV5lOcU8elVU670N_h3Lim65rsfGeARPhnN1mzpyheFhO5uj0wOx3psL41NBVABuejZxJnvIjxa-g2ZgbHM8ayBzLJWKwwdJ19AjiieucW_7l8nyEKJ1ak4P8" title="" target="">[maven仓库]</a> 搜索下载 并添加Lombok依赖到pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.projectlombok&#x2F;lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.18.8&lt;&#x2F;version&gt;&lt;!--可以不加版本号--&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data : 自动生成set&#x2F;get方法，toString方法，equals方法，hashCode方法，不带参数的构造方法 </span><br><span class="line">@NonNull : 让你不在担忧并且爱上NullPointerException </span><br><span class="line">@CleanUp : 自动资源管理：不用再在finally中添加资源的close方法 </span><br><span class="line">@Setter&#x2F;@Getter : 自动生成set和get方法 </span><br><span class="line">@ToString : 自动生成toString方法 </span><br><span class="line">@EqualsAndHashcode : 从对象的字段中生成hashCode和equals的实现 </span><br><span class="line">@NoArgsConstructor&#x2F;@RequiredArgsConstructor&#x2F;@AllArgsConstructor </span><br><span class="line">自动生成构造方法 </span><br><span class="line">@Value : 用于注解final类 </span><br><span class="line">@Builder : 产生复杂的构建器api类，可以让你以下面显示的那样调用你的代码，来初始化你的实例对象</span><br><span class="line">@SneakyThrows : 异常处理（谨慎使用） </span><br><span class="line">@Synchronized : 同步方法安全的转化 </span><br><span class="line">@Log : 支持各种logger对象，使用时用对应的注解，如：@Log4</span><br></pre></td></tr></table></figure>

<p>@Data和@Log注解用的较多<br>未使用Lombok管理时实体类User</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String pwd;</span><br><span class="line">    private Double score;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPwd() &#123;</span><br><span class="line">        return pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPwd(String pwd) &#123;</span><br><span class="line">        this.pwd &#x3D; pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Double getScore() &#123;</span><br><span class="line">        return score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setScore(Double score) &#123;</span><br><span class="line">        this.score &#x3D; score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(Integer id, String name, String pwd, Double score) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.pwd &#x3D; pwd;</span><br><span class="line">        this.score &#x3D; score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; o) return true;</span><br><span class="line">        if (o &#x3D;&#x3D; null || getClass() !&#x3D; o.getClass()) return false;</span><br><span class="line">        User user &#x3D; (User) o;</span><br><span class="line">        return Objects.equals(id, user.id) &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name) &amp;&amp;</span><br><span class="line">                Objects.equals(pwd, user.pwd) &amp;&amp;</span><br><span class="line">                Objects.equals(score, user.score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return Objects.hash(id, name, pwd, score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;id&#x3D;&quot; + id +</span><br><span class="line">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, pwd&#x3D;&#39;&quot; + pwd + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, score&#x3D;&quot; + score +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加@Data后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private String pwd;</span><br><span class="line">    private Double score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后实例化User之后，里面所有方法都可以使用，添加UserController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Log4j2</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;private final Logger logger &#x3D; LogManager.getLogger(this.getClass());</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">    public User testUser() &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setName(&quot;zhangsan&quot;);</span><br><span class="line">        user.setPwd(&quot;123&quot;);</span><br><span class="line">        user.setScore(2.0D);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line"></span><br><span class="line">        log.info(&quot;info excute&quot;);</span><br><span class="line">        log.warn(&quot;warn excute&quot;);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在applicaiton.properties中添加日志输出位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging.file &#x3D; logs&#x2F;spring-boot-test-lombok.log</span><br></pre></td></tr></table></figure>
<p>浏览器输入localhost:8080/test</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130301.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130311.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130322.png"  alt=""></p>
<p>补充：在User类上添加@Builder</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User user &#x3D; User.builder()</span><br><span class="line">                .id(1)</span><br><span class="line">                .name(&quot;aaa&quot;)</span><br><span class="line">                .pwd(&quot;bbb&quot;)</span><br><span class="line">                .score(&quot;bbb&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>

<p>更多内容请访问 <a href="https://codepandaes.github.io/" target="_blank" rel="noopener">我的个人博客</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Mybatis注解版</title>
    <url>/2020/03/11/SpringBoot%E6%95%B4%E5%90%88Mybatis%E6%B3%A8%E8%A7%A3%E7%89%88/</url>
    <content><![CDATA[<p>SpringBoot+Mybatis+druid整合详细过程，这里使用的是druid连接池（亦可以使用hikari连接池，参考<a href="https://www.jianshu.com/p/a17f9e7bcb55" target="_blank" rel="noopener">SpringBoot整合hikari</a>），具体参数配置请参考我的上一篇博客<a href="https://www.jianshu.com/p/a7fabf0e1990" target="_blank" rel="noopener">SpringBoot整合druid</a></p>
<a id="more"></a>

<h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p>首先新建一个SpringBoot的web项目，选择Spring Initializr（用来初始化一个Spring boot 的项目）</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408120009.png"  alt=""></p>
<p>然后填写项目坐标，自行修改</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408120026.png"  alt=""></p>
<p>最后选择要添加的组件web，Mybatis，mysql新建成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408120054.png"  alt=""></p>
<hr>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开pom.xml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--mybatis依赖--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.1.1&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;!--添加druid依赖--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.1.16&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;!--导入log4j，因为driud添加的拓展插件为log4j--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br><span class="line"> &lt;!--mysql依赖--&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>打开配置文件application.yml添加具体属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#数据源基本配置</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver# 时区配置错误就添加 serverTimezone &#x3D; UTC</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC</span><br><span class="line">    #druid增加的配置</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下配置酌情处理&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    # 初始化连接池个数</span><br><span class="line">    initialSize: 5</span><br><span class="line">    # 最小连接池个数</span><br><span class="line">    minIdle: 5</span><br><span class="line">    # 最大连接池个数</span><br><span class="line">    max-active: 20</span><br><span class="line">    # 配置获取连接等待超时的时间</span><br><span class="line">    maxWait: 60000</span><br><span class="line">    # 配置间隔多久才进行一次检测</span><br><span class="line">    timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">    # 最小生存的时间</span><br><span class="line">    minEvictableIdleTimeMillis: 300000</span><br><span class="line">    # 用来检测连接是否有效的sql，要求是一个查询语句。</span><br><span class="line">    # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用</span><br><span class="line">    validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">    # 建议配置为true，不影响性能，并且保证安全性。</span><br><span class="line">    # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><br><span class="line">    testWhileIdle: true</span><br><span class="line">    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span><br><span class="line">    testOnBorrow: false</span><br><span class="line">    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span><br><span class="line">    testOnReturn: false</span><br><span class="line">    # 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">    poolPreparedStatements: true</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">    # 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：</span><br><span class="line">    # 监控统计用的filter:stat</span><br><span class="line">    # 日志用的filter:log4j</span><br><span class="line">    # 防御sql注入的filter:wall</span><br><span class="line">    filters: stat,wall,log4j</span><br><span class="line">    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;5000</span><br><span class="line">    # 合并多个DruidDataSource的监控数据</span><br><span class="line">    useGlobalDataSourceStat: true</span><br></pre></td></tr></table></figure>
<p>添加配置类MyBatisConfig开启驼峰命名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MybatisConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ConfigurationCustomizer configurationCustomizer() &#123;</span><br><span class="line">        return new ConfigurationCustomizer() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void customize(Configuration configuration) &#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(true); &#x2F;&#x2F;开启驼峰</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加实体类Department</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Department &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String departmentName;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDepartmentName() &#123;</span><br><span class="line">        return departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDepartmentName(String departmentName) &#123;</span><br><span class="line">        this.departmentName &#x3D; departmentName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开数据库管理工具新建名为mybatis的数据库，执行Department类对应sql脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET FOREIGN_KEY_CHECKS&#x3D;0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for department</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;department&#96;;</span><br><span class="line">CREATE TABLE &#96;department&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;department_name&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>
<p>添加接口DepartmentMapper，使用注解增删改查，这里只演示insert和select</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface DepartmentMapper &#123;</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from department where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">    Department getDeptById(Integer id);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;使用自动生成的主键，并告诉是那个属性是封装主键的</span><br><span class="line">    @Options(useGeneratedKeys &#x3D; true, keyProperty &#x3D; &quot;id&quot;)</span><br><span class="line">    @Insert(&quot;insert into department(department_name) values(#&#123;departmentName&#125;)&quot;)</span><br><span class="line">    int insertDept(Department department);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类上添加@MapperScan扫描mapper包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@MapperScan(value &#x3D; &quot;com.springboot.mapper&quot;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringBootDataMybatisApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootDataMybatisApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加DeptController类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DeptController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;dept&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public Department getDepartment(@PathVariable(&quot;id&quot;) Integer id) &#123;</span><br><span class="line">        return departmentMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;insert&quot;)</span><br><span class="line">    public Department insertDept(Department department) &#123;</span><br><span class="line">        departmentMapper.insertDept(department);</span><br><span class="line">        return department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目，在浏览器输入localhost：8080/insert?departmentName=huawei，新增数据成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408120112.png"  alt=""></p>
<p>然后再输入localhost:8080/dept/1，获取departmentName=huawei的数据</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408120133.png"  alt=""></p>
<p>至此整合成功</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Druid</title>
    <url>/2020/03/11/SpringBoot%E6%95%B4%E5%90%88druid/</url>
    <content><![CDATA[<p>Druid功能强大且全面</p>
<a id="more"></a>

<p>Druid是Alibaba开源的的数据库连接池。Druid能够提供强大的监控功能，比如sql监控、URI监控、Session监控等，在功能、性能、扩展性方面都超过其他例如DBCP、C3P0等连接池，而且Druid是一个开源项目，源码托管在github上，地址是 <a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">https://github.com/alibaba/druid</a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开pom.xml引入依赖，可在<a href="https://mvnrepository.com/tags/maven" target="_blank" rel="noopener">https://mvnrepository.com/tags/maven</a>搜索druid下载，建议下载alibaba提供的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--引入mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--导入德鲁伊--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.16&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--导入log4j，因为driud添加的拓展插件为log4j--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>修改配置文件application.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#数据源基本配置</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver# 时区配置错误就添加 serverTimezone &#x3D; UTC</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?serverTimezone&#x3D;UTC</span><br><span class="line">    #druid增加的配置</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;以下配置酌情处理&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    # 初始化连接池个数</span><br><span class="line">    initialSize: 5</span><br><span class="line">    # 最小连接池个数</span><br><span class="line">    minIdle: 5</span><br><span class="line">    # 最大连接池个数</span><br><span class="line">    max-active: 20</span><br><span class="line">    # 配置获取连接等待超时的时间</span><br><span class="line">    maxWait: 60000</span><br><span class="line">    # 配置间隔多久才进行一次检测</span><br><span class="line">    timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">    # 最小生存的时间</span><br><span class="line">    minEvictableIdleTimeMillis: 300000</span><br><span class="line">    # 用来检测连接是否有效的sql，要求是一个查询语句。</span><br><span class="line">    # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用</span><br><span class="line">    validationQuery: SELECT 1 FROM DUAL</span><br><span class="line">    # 建议配置为true，不影响性能，并且保证安全性。</span><br><span class="line">    # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><br><span class="line">    testWhileIdle: true</span><br><span class="line">    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span><br><span class="line">    testOnBorrow: false</span><br><span class="line">    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span><br><span class="line">    testOnReturn: false</span><br><span class="line">    # 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">    poolPreparedStatements: true</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">    # 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：</span><br><span class="line">    # 监控统计用的filter:stat</span><br><span class="line">    # 日志用的filter:log4j</span><br><span class="line">    # 防御sql注入的filter:wall</span><br><span class="line">    filters: stat,wall,log4j</span><br><span class="line">    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;5000</span><br><span class="line">    # 合并多个DruidDataSource的监控数据</span><br><span class="line">    useGlobalDataSourceStat: true</span><br></pre></td></tr></table></figure>
<p>添加配置类DruidConfig</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DruidConfig &#123;</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource druid() &#123;</span><br><span class="line">        return new DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;配置Druid的监控 现在可以在application.yml配置文件中配置了</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean statViewServlet() &#123;</span><br><span class="line">        ServletRegistrationBean bean &#x3D; new ServletRegistrationBean&lt;&gt;(new StatViewServlet(), &quot;&#x2F;druid&#x2F;*&quot;);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; initMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">&#x2F;&#x2F;设置账号密码</span><br><span class="line">        initMap.put(&quot;loginUsername&quot;, &quot;admin&quot;);</span><br><span class="line">        initMap.put(&quot;loginPassword&quot;, &quot;123456&quot;);</span><br><span class="line">        initMap.put(&quot;allow&quot;, &quot;&quot;);&#x2F;&#x2F;默认允许所有地址访问</span><br><span class="line">&#x2F;&#x2F;      initMap.put(&quot;deny&quot;, &quot;192.168.3.22&quot;); 拒绝地址访问</span><br><span class="line">        bean.setInitParameters(initMap);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;配置web监控的  filter</span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean webStatFilter() &#123;</span><br><span class="line">        FilterRegistrationBean bean &#x3D; new FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(new WebStatFilter());</span><br><span class="line">        Map&lt;String, String&gt; initMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        &#x2F;&#x2F;排除js脚本文件，css样式</span><br><span class="line">        initMap.put(&quot;exclusions&quot;, &quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);</span><br><span class="line">        bean.setInitParameters(initMap);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(&quot;&#x2F;*&quot;));</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目，浏览器输入<strong>localhost:8080/druid</strong>，输入用户名和密码为admin，123456进入访问页面成功<br><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408114547.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408114609.png"  alt=""></p>
<p>至此就能在图形化界面查看SQL监控，数据源等功能</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合ehcache</title>
    <url>/2020/03/11/SpringBoot%E6%95%B4%E5%90%88ehcache/</url>
    <content><![CDATA[<p>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认CacheProvider。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,Java EE和轻量级容器。它具有内存和磁盘存储，缓存加载器,缓存扩展,缓存异常处理程序,一个gzip缓存servlet过滤器,支持REST和SOAP api等特点。</p>
<h2 id="ehcache-和-redis-比较"><a href="#ehcache-和-redis-比较" class="headerlink" title="ehcache 和 redis 比较"></a>ehcache 和 redis 比较</h2><p>ehcache直接在jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。<br>redis是通过socket访问到缓存服务，效率比ecache低，比数据库要快很多，处理集群和分布式缓存方便，有成熟的方案。<br>如果是单个应用或者对缓存访问要求很高的应用，用ehcache。<br>如果是大型系统，存在缓存共享、分布式部署、缓存内容很大的，建议用redis。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Spring对缓存的支持类似于对事务的支持，相当于定义了切点，然后使用Aop技术在这个方法的调用前、调用后获取方法的入参和返回值，进而实现了缓存的逻辑。<br>主要注解：<br>@Cacheable<br>表明所修饰的方法是可以缓存的：当第一次调用这个方法时，它的结果会被缓存下来，在缓存的有效时间内，以后访问这个方法都直接返回缓存结果，不再执行方法中的代码段。<br>这个注解可以用condition属性来设置条件，如果不满足条件，就不使用缓存能力，直接执行方法。<br>可以使用key属性来指定key的生成规则。</p>
<p>@CachePut<br>与@Cacheable不同，@CachePut不仅会缓存方法的结果，还会执行方法的代码段。它支持的属性和用法都与@Cacheable一致。一个缓存后就不执行代码了，一个还要执行)</p>
<p>@CacheEvict<br>与@Cacheable功能相反，@CacheEvict表明所修饰的方法是用来删除失效或无用的缓存数据。<br>value：缓存位置名称，不能为空，同上<br>key：缓存的key，默认为空，同上<br>condition：触发条件，只有满足条件的情况才会清除缓存，默认为空，支持<strong>SpEL</strong><br>allEntries：true表示清除value中的全部缓存，默认为false</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备好新建数据库和表结构，并插入数据，sql脚本如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">SQLyog Ultimate v12.08 (64 bit)</span><br><span class="line">MySQL - 5.6.42 : Database - spring_cache</span><br><span class="line">*********************************************************************</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET NAMES utf8 *&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET SQL_MODE&#x3D;&#39;&#39;*&#x2F;;</span><br><span class="line"></span><br><span class="line">&#x2F;*!40014 SET @OLD_UNIQUE_CHECKS&#x3D;@@UNIQUE_CHECKS, UNIQUE_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET @OLD_FOREIGN_KEY_CHECKS&#x3D;@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO&#39; *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;</span><br><span class="line">CREATE DATABASE &#x2F;*!32312 IF NOT EXISTS*&#x2F;&#96;spring_cache&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 *&#x2F;;</span><br><span class="line"></span><br><span class="line">USE &#96;spring_cache&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;*Table structure for table &#96;employee&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;employee&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;employee&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;lastName&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;email&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;gender&#96; int(2) DEFAULT NULL,</span><br><span class="line">  &#96;d_id&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">&#x2F;*Data for the table &#96;employee&#96; *&#x2F;</span><br><span class="line"></span><br><span class="line">insert  into &#96;employee&#96;(&#96;id&#96;,&#96;lastName&#96;,&#96;email&#96;,&#96;gender&#96;,&#96;d_id&#96;) values (1,&#39;zhangsan&#39;,&#39;1234@qq.com&#39;,1,1);</span><br><span class="line"></span><br><span class="line">&#x2F;*!40101 SET SQL_MODE&#x3D;@OLD_SQL_MODE *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET FOREIGN_KEY_CHECKS&#x3D;@OLD_FOREIGN_KEY_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET UNIQUE_CHECKS&#x3D;@OLD_UNIQUE_CHECKS *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET SQL_NOTES&#x3D;@OLD_SQL_NOTES *&#x2F;;</span><br></pre></td></tr></table></figure>

<h2 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h2><p>SpringBoot + 注解版Mybatis + Mysql<br>pom.xml文件依赖如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-cache&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.1&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;&#x2F;exclusions&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>

<p>配置文件application.yml中数据库连接和开启驼峰命名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;spring_cache?serverTimezone&#x3D;UTC</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    #开启驼峰命名法</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">    #开启日志打印</span><br><span class="line">#com.eh.springbootcache: 目录</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      eh:</span><br><span class="line">        springbootcache:</span><br><span class="line">          mapper: debug</span><br></pre></td></tr></table></figure>

<p>添加实体类employee</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Employee &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line">    private Integer gender;</span><br><span class="line">    private String email;</span><br><span class="line">    private Integer dId;</span><br><span class="line"></span><br><span class="line">    public Employee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Employee(Integer id, String lastName, Integer gender, String email, Integer dId) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">        this.lastName &#x3D; lastName;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">        this.email &#x3D; email;</span><br><span class="line">        this.dId &#x3D; dId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id &#x3D; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">        return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">        this.lastName &#x3D; lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(Integer gender) &#123;</span><br><span class="line">        this.gender &#x3D; gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email &#x3D; email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getdId() &#123;</span><br><span class="line">        return dId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setdId(Integer dId) &#123;</span><br><span class="line">        this.dId &#x3D; dId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加dao层EmployeeMapper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface EmployeeMapper &#123;</span><br><span class="line">    @Select(&quot;SELECT * FROM employee WHERE id &#x3D; #&#123;id&#125;&quot;)</span><br><span class="line">    public Employee getEmpById(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加service层</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class EmployeeService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将方法的运行结果进行缓存，再次查询就可以从缓存中取,不用调用该方法</span><br><span class="line">    @Cacheable(value &#x3D; &quot;&#123;emp&#125;&quot;, condition &#x3D; &quot;#id&gt;0&quot;)</span><br><span class="line">    public Employee getEmp(Integer id) &#123;</span><br><span class="line">        System.out.println(&quot;查询员工&quot; + id);</span><br><span class="line">        return employeeMapper.getEmpById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加EmployeeController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class EmployeeController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;emp&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public Employee getEmp(@PathVariable(&quot;id&quot;) Integer id) &#123;</span><br><span class="line">        return employeeService.getEmp(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开启注解缓存，扫描EmployeeMapper所在包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@MapperScan(&quot;com.eh.springbootcache.mapper&quot;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableCaching   &#x2F;&#x2F;开启基于注解的缓存</span><br><span class="line">public class SpringBootCacheApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringBootCacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器输入localhost:8080/emp/1第一次查询数据，console输出如下</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130047.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130055.png"  alt=""></p>
<p>清空console，第二次则使用缓存，显示结果，如下</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408130110.png"  alt=""></p>
<p>@CachePut和@CacheEvict的用法可自行测试</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>ehcache</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合hikari</title>
    <url>/2020/03/11/SpringBoot%E6%95%B4%E5%90%88hikari/</url>
    <content><![CDATA[<p>hikari号称史上最快连接池，也是SpringBoot默认推荐的连接池</p>
<a id="more"></a>

<h2 id="为什么hikari连接池如此的快"><a href="#为什么hikari连接池如此的快" class="headerlink" title="为什么hikari连接池如此的快"></a>为什么hikari连接池如此的快</h2><p>官网说：</p>
<ol>
<li>自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；</li>
<li>优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码；</li>
<li>字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；</li>
<li>自定义集合类型（ConcurrentBag）：提高并发读写的效率；<br>由此可见，相比于其他链接池C3P0，DBCP“性能王”hikari的优势很明显，再加上它130kb的小身形，日后前途不可限量。</li>
</ol>
<hr>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先新建一个SpringBoot的web项目，详情请参考我的上一篇博文<a href="https://www.jianshu.com/p/84b4459060a1" target="_blank" rel="noopener">SpringBoot初体验</a>，然后配置application.yml文件指定连接池类型为hikari</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据库配置</span><br><span class="line">spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;hikariTest?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false</span><br><span class="line">spring.datasource.username &#x3D; root</span><br><span class="line">spring.datasource.password &#x3D; root</span><br><span class="line">spring.datasource.driverClassName &#x3D; com.mysql.jdbc.Driver</span><br><span class="line">#指定连接池类型为hikari</span><br><span class="line">spring.datasource.type&#x3D;com.zaxxer.hikari.HikariDataSource</span><br><span class="line"></span><br><span class="line"># 连接池最大连接数，默认是10</span><br><span class="line">spring.datasource.hikari.maximum-pool-size&#x3D;50</span><br><span class="line"># 此属性控制从池返回的连接的默认自动提交行为,默认值：true</span><br><span class="line">spring.datasource.hikari.auto-commit&#x3D;true</span><br><span class="line">#连接将被测试活动的最大时间量</span><br><span class="line">spring.datasource.hikari.validationTimeout&#x3D;10000 </span><br><span class="line"># 连接池连接的最长生命周期，默认30分钟</span><br><span class="line">spring.datasource.hikari.max-lifetime&#x3D;1800000</span><br><span class="line"># 连接超时时间,默认30秒</span><br><span class="line">spring.datasource.hikari.connection-timeout&#x3D;30000</span><br><span class="line">#如果您的驱动程序支持JDBC4，不要设置此属性</span><br><span class="line">spring.datasource.hikari.connection-test-query&#x3D;SELECT 1</span><br><span class="line"># 最小空闲连接数量</span><br><span class="line">spring.datasource.hikari.minimum-idle&#x3D;10</span><br><span class="line"># 空闲连接存活最大时间，默认10分钟</span><br><span class="line">spring.datasource.hikari.idle-timeout&#x3D;180000</span><br></pre></td></tr></table></figure>
<p>pom.xml中添加依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.zaxxer&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;HikariCP&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>启动项目看到<strong>com.zaxxer.hikari.HikariDataSource：Start completed</strong>即连接成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408112014.png"  alt=""></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>hikari</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合thymeleaf</title>
    <url>/2020/03/11/SpringBoot%E6%95%B4%E5%90%88thymeleaf/</url>
    <content><![CDATA[<p>好用的模板引擎thymeleaf</p>
<a id="more"></a>

<hr>
<h2 id="thymeleaf简介"><a href="#thymeleaf简介" class="headerlink" title="thymeleaf简介"></a>thymeleaf简介</h2><p>Spring Boot提供了多种模板引擎的默认配置支持，但嵌入式容器JSP有限制，2010年后Velocity停止更新，所以这JSP与Velocity两个不建议使用。而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</p>
<h2 id="Thymeleaf的特点"><a href="#Thymeleaf的特点" class="headerlink" title="Thymeleaf的特点"></a>Thymeleaf的特点</h2><ul>
<li>动静结合：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li>
<li>开箱即用：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li>
<li>多方言支持：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>
<li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。<h2 id="和SpringBoot整合"><a href="#和SpringBoot整合" class="headerlink" title="和SpringBoot整合"></a>和SpringBoot整合</h2></li>
</ul>
<ol>
<li><p>新建SpringBoot项目（可参考我的上一篇博客<a href="https://www.jianshu.com/p/84b4459060a1" target="_blank" rel="noopener">SpringBoot初体验</a>），打开pom.xml，添加thymeleaf依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!--web容器--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--前端模板thymeleaf依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>打开配置文件application,yml（application.properties），关闭thymeleaf缓存</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111632.png"  alt=""></p>
</li>
<li><p>新建HelloWorldController类，返回hello页面</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111650.png"  alt=""></p>
</li>
<li><p>templates目录下新建hello.html</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111705.png"  alt=""></p>
</li>
<li><p>打开SpringBootThymeleafApplication类启动项目</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111734.png"  alt=""></p>
</li>
<li><p>浏览器中输入localhost:8080/hello，访问成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408111817.png"  alt=""></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自定义starter</title>
    <url>/2020/03/11/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</url>
    <content><![CDATA[<p>为什么需要自制启动器？<br>因为极大的提高了代码的高可用，比如在我们的日常开发工作中，如果一个工程需要复用一些独立于业务之外的配置模块时候，我们将这些可独立于业务代码之外的功配置模块封装成一个个starter，复用的时候只需要将其在pom中引用依赖即可</p>
<a id="more"></a>

<h2 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h2><ol>
<li>新建一个空工程</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125301.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125326.png"  alt="命名为spring-boot-08"></p>
<ol start="2">
<li>创建一个普通的maven工程hello-spring-boot-starter，这个工程里面不写业务逻辑，只是一个空的JAR文件用来依赖引入hello-spring-boot-autoconfig（下一步创建），而对外在测试类中需要引用我们自定义的启动器，只需引入hello-spring-boot-starter即可。</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125411.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125432.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125450.png"  alt=""></p>
<ol start="3">
<li>建立一个实现业务逻辑的工程hello-spring-boot-autoconfig，这种的命名方式是因为SpringBoot提供的starter以spring-boot-starter-xxx的方式命名的，而官方建议自定义的starter使用xxx-spring-boot-starter命名规则，以区分SpringBoot生态提供的starter。</li>
</ol>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125530.png"  alt="使用Spring Initializr快速构建"></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125553.png"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125559.png"  alt=""></p>
<p>pom.xml如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.hello.starter&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hello-spring-boot-starter-autoconfig&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;hello-spring-boot-starter-autoconfig&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;&#x2F;exclusions&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<p>在hello-spring-boot-starter工程的pom.xml中引入hello-spring-boot-autoconfig依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.hello.starter&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hello-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--启动器里面只做依赖引入,引入hello-spring-boot-autoconfig--&gt;</span><br><span class="line">        &lt;!--别人要用我们自定义的启动器，只需要引入hello-spring-boot-starter--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.hello.starter&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hello-spring-boot-starter-autoconfig&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="开始编码"><a href="#开始编码" class="headerlink" title="开始编码"></a>开始编码</h2><p>删掉主程序和配置文件还有test目录</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125617.png"  alt=""></p>
<p>在hello-spring-boot-starter-autoconfig项目下新建HelloProperties实体类映射配置信息，用@ConfigurationProperties注解可以完成将application.yml配置文件内的有规则的配置参数映射到实体内的field内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;hello.starter&quot;)</span><br><span class="line">public class HelloProperties &#123;</span><br><span class="line">    private String prefix;</span><br><span class="line">    private String suffix;</span><br><span class="line"></span><br><span class="line">    public String getPrefix() &#123;</span><br><span class="line">        return prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrefix(String prefix) &#123;</span><br><span class="line">        this.prefix &#x3D; prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSuffix() &#123;</span><br><span class="line">        return suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSuffix(String suffix) &#123;</span><br><span class="line">        this.suffix &#x3D; suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加service类，通过sayHello方法完成对helloProperties的属性读取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HelloService &#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    public HelloProperties getHelloProperties() &#123;</span><br><span class="line">        return helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setHelloProperties(HelloProperties helloProperties) &#123;</span><br><span class="line">        this.helloProperties &#x3D; helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">此处业务逻辑可更换</span><br><span class="line">*&#x2F;</span><br><span class="line">    public String sayHello(String name) &#123;</span><br><span class="line">        return helloProperties.getPrefix() + &quot;-&quot; + name + &quot;-&quot; + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加配置类HelloServiceAutoConfiguration，如果你用来测试的工程是web工程，那么在测试工程启动的时候会自动读取此配置类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnWebApplication &#x2F;&#x2F;需要是web应用，此处的配置才生效</span><br><span class="line">@EnableConfigurationProperties(HelloProperties.class)  &#x2F;&#x2F;属性文件生效</span><br><span class="line">public class HelloServiceAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public HelloService helloService() &#123;</span><br><span class="line">        HelloService helloService &#x3D; new HelloService();</span><br><span class="line">        helloService.setHelloProperties(helloProperties);</span><br><span class="line">        return helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>resources目录下新建META-INF文件夹，然后创建spring.factories文件，添加如下代码，读取配置类HelloServiceAutoConfiguration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">com.hello.starter.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为hello-spring-boot-starter依赖于hello-spring-boot-autoconfig所以先安装xxx-autoconfig，再安装xxx-starter</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125644.png"  alt=""></p>
<p>安装之前，记得删除pom文件中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--删除，因为前面已经删除了test类，不需要了--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;&#x2F;exclusions&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--记得删除，不然打包不成功--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>新建一个用于测试的web工程hello-spring-boot-08-test，记得选中web组件</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125658.png"  alt=""></p>
<p>在pom.xml中引入启动器依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--引入自定义的starter：hello-spring-boot-starter--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.hello.starter&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hello-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>打开配置文件application，添加前缀prefix，和后缀suffix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello.starter.prefix&#x3D;2020</span><br><span class="line">hello.starter.suffix&#x3D;come on</span><br></pre></td></tr></table></figure>

<p>添加HelloController测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">       return helloService.sayHello(&quot;中国&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动项目，浏览器输入localhost:8080/hello，返回结果，自制starter测试成功</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408125711.png"  alt=""></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>starter</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成Spring Security(1)-初体验</title>
    <url>/2020/03/11/SpringBoot%E9%9B%86%E6%88%90Spring-Security%EF%BC%881%EF%BC%89-%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>学习Spring Security之前我们需要先了解些基本概念</p>
<a id="more"></a>

<h2 id="什么是认证"><a href="#什么是认证" class="headerlink" title="什么是认证"></a>什么是认证</h2><p>为了保护系统的隐私数据和资源，判断一个用户的身份合法性的过程就是认证，比如现在账号密码登录，扫描二维码，指纹认证，人脸识别其实都包含了认证过程</p>
<h2 id="什么是授权"><a href="#什么是授权" class="headerlink" title="什么是授权"></a>什么是授权</h2><p>授权是通过认证的用户根据用户的权限来控制用户访问资源的过程，比如支付宝使用红包功能必须要绑定银行卡，点外卖必须添加家庭住址</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它是用于保护基于Spring的应用程序的实际标准，致力于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring Security的真正强大之处在于可以轻松扩展以满足自定义要求</p>
<h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><p>新建SpringBoot的Web工程，在pom.xml中添加web和Spring Security依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>新建配置类SecurityConfig重写configure(HttpSecurity http)和configure(WebSecurity web)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration      &#x2F;&#x2F;配置类</span><br><span class="line">@EnableWebSecurity      &#x2F;&#x2F;开启SpringSecurity认证授权</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        </span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;&#x2F;&quot;).permitAll()      &#x2F;&#x2F;放行主路径</span><br><span class="line">                .anyRequest().authenticated()      &#x2F;&#x2F;其他的请求全部经过验证</span><br><span class="line">                .and()</span><br><span class="line">                .logout().permitAll()              &#x2F;&#x2F;允许任意权限访问注销页面</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin();                      &#x2F;&#x2F;允许表单登录</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(WebSecurity web) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F;忽略静态资源</span><br><span class="line">        web.ignoring().antMatchers(&quot;&#x2F;js&#x2F;**&quot;, &quot;&#x2F;css&#x2F;**&quot;, &quot;&#x2F;images&#x2F;**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加测试类TestController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;&quot;)</span><br><span class="line">    public String home() &#123;</span><br><span class="line">        return &quot;hello spring boot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;hello world&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动项目，浏览器输入localhost:8080 结果如下，没有被拦截</p>
<p><img src="/" class="lazyload" data-src="/images/QQ%E6%88%AA%E5%9B%BE20200314154107.png"  alt=""></p>
<p>再次输入localhost:8080/hello，此时被Security拦截，跳转到登陆页面</p>
<p><img src="/" class="lazyload" data-src="/images/QQ%E6%88%AA%E5%9B%BE20200314154132.png"  alt=""></p>
<p>更多内容请访问 <a href="https://codepandaes.github.io/" target="_blank" rel="noopener">我的个人博客</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo设置icarus主题</title>
    <url>/2020/03/06/hexo%E4%B8%BB%E9%A2%98icarus%E8%AE%BE%E7%BD%AE%E5%92%8Chexo%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>上篇博文只是简单搭建起来了Hexo博客，现在来设置主要配置信息和修改主题icarus</p>
<a id="more"></a>

<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title:  #主页标题</span><br><span class="line">subtitle:  #副标题</span><br><span class="line">description: #网站描述description主要用于SEO</span><br><span class="line">keywords:  #博客关键字</span><br><span class="line">author: #作者，左下角显示</span><br><span class="line">language: zh_Hans # 选择中文简体</span><br><span class="line">timezone: 'Asia/Shanghai'  #时区:国内选择上海</span><br><span class="line"># Url</span><br><span class="line">url: http:<span class="comment">//yoursite.com  #填自己的github pages网址 </span></span><br><span class="line">root: /                   #网站根目录</span><br><span class="line">permalink: :year/:month/:day/:title/        #文章的 永久链接 格式</span><br><span class="line">permalink_defaults:                         #永久链接中各部分的默认值</span><br><span class="line">pretty_urls:                                #改写 permalink 的值来美化 URL</span><br><span class="line">trailing_index: false # 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html 是否在                         永久链接中保留尾部的 index.html，设置为 false 时去除</span><br><span class="line">trailing_html: true #是否在永久链接中保留尾部.html, 设置为 false 时去除</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source        #资源文件夹，这个文件夹用来存放内容。</span><br><span class="line">public_dir: public        #公共文件夹，这个文件夹用于存放生成的站点文件。</span><br><span class="line">tag_dir: tags             #标签文件夹</span><br><span class="line">archive_dir: archives     #归档文件夹</span><br><span class="line">category_dir: categories  #分类文件夹</span><br><span class="line">code_dir: downloads/code  #Include code 文件夹，source_dir 下的子目录</span><br><span class="line">i18n_dir: :lang           #国际化（i18n）文件夹</span><br><span class="line">skip_render:              #跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可						   使用 glob 表达式来匹配路径。</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :year-:month-:day-:title.md #生成yyyy-MM-dd-博文名称的名称有助于我们管理自己的博                                               文。 </span><br><span class="line">default_layout: post    #预设布局</span><br><span class="line">titlecase: false  #把标题转换为 title case</span><br><span class="line">external_link:    #在新标签中打开链接</span><br><span class="line">  enable: true #在新标签中打开链接</span><br><span class="line">  field: site #对整个网站（site）生效或仅对文章（post）生效</span><br><span class="line">  exclude: ''  #需要排除的域名。主域名和子域名如 www 需分别配置</span><br><span class="line">filename_case: 0  #把文件名称转换为 (1) 小写或 (2) 大写</span><br><span class="line">render_drafts: false #显示草稿</span><br><span class="line">post_asset_folder: false  #启动 Asset 文件夹 new 文件的同时，xxxx.md文件还有一个同名的文件夹</span><br><span class="line">relative_link: false  #把链接改为与根目录的相对位址</span><br><span class="line">future: true  #显示未来的文章</span><br><span class="line">highlight:</span><br><span class="line">  enable: true  #开启代码块高亮</span><br><span class="line">  line_number: true  #显示行数</span><br><span class="line">  auto_detect: false  #如果未指定语言，则启用自动检测</span><br><span class="line">  tab_replace: ''  #用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><br><span class="line">  wrap: true    # 将代码块包装到&lt;table&gt;</span><br><span class="line">  hljs: false   # CSS类使用hljs-*前缀</span><br><span class="line"></span><br><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = '')</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">''</span></span><br><span class="line">  per_page: <span class="number">10</span></span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized  #默认分类</span><br><span class="line">category_map:   #分类别名</span><br><span class="line">tag_map:   #标签别名</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">meta_generator: true   # Meta generator 标签。 值为 false 时 Hexo 不会在头部插入该标签</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date Hexo 使用 Moment.js 来解析和显示时间</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD  #日期格式</span><br><span class="line">time_format: HH:mm:ss   #时间格式</span><br><span class="line">use_date_for_updated: false  #启用以后，如果Front Matter中没有指定 updated， post.updated 将会使用date的值而不是文件的创建时间。在Git工作流中这个选项会很有用</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10  #每页显示的文章量 (0 = 关闭分页功能)</span><br><span class="line">pagination_dir: page  #分页目录</span><br><span class="line"></span><br><span class="line"># Include / Exclude file(s)</span><br><span class="line">## include:/exclude: options only apply to the 'source/' folder</span><br><span class="line">include:  #Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和            _data 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span><br><span class="line">exclude:  #Hexo 会忽略这些文件和目录</span><br><span class="line">ignore:   #Ignore files/folders</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: icarus #当前主题名称。值为false时禁用主题</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:   #部署部分的设置</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/CodePandaes/CodePandaes.github.io.git #github中仓库地址</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="替换icarus主题"><a href="#替换icarus主题" class="headerlink" title="替换icarus主题"></a>替换icarus主题</h2><a href="https://github.com/ppoffice/hexo-theme-icarus" title="" target="">icarus</a>这个主题比较小众，个人也很喜欢这个主题<a href="https://github.com/litten/hexo-theme-yilia" title="" target="">yilia</a>，或者选择<a href="https://hexo.io/themes/" title="" target="">官方主题</a>，打开git bash下载主题icarus

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ cd /d/WorkPlace/myHexo</span><br><span class="line">$ git clone https:<span class="comment">//github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span></span><br></pre></td></tr></table></figure>

<p>下载好的主题在themes文件夹下</p>
<p><img src="/" class="lazyload" data-src="https://gitee.com/codepandaes/pictureBedOne/raw/master/img/20200408002207.png"  alt=""></p>
<p>修改配置文件完成后，git bash中执行命令hexo clean(清除缓存文件)，然后执行hexo g 和hexo s 重新发布</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">theme: icarus #在Hexo配置文件中把landscape切换为icarus</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="icarus配置"><a href="#icarus配置" class="headerlink" title="icarus配置"></a>icarus配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">version: 2.6.0 #版本</span><br><span class="line">favicon: /images/panda.ico #浏览器图标</span><br><span class="line">meta: # Additional HTML meta tags in an array.</span><br><span class="line">canonical_url: # canonical_url of your site</span><br><span class="line">rss: # Path or URL to RSS atom.xml</span><br><span class="line">logo: /images/logo.ico #logo</span><br><span class="line"># Open Graph metadata</span><br><span class="line"># https://hexo.io/docs/helpers.html#open-graph</span><br><span class="line">open_graph:</span><br><span class="line">    # Facebook App ID</span><br><span class="line">    fb_app_id: </span><br><span class="line">    # Facebook Admin ID</span><br><span class="line">    fb_admins: </span><br><span class="line">    # Twitter ID</span><br><span class="line">    twitter_id: </span><br><span class="line">    # Twitter site</span><br><span class="line">    twitter_site: </span><br><span class="line">    # Google+ profile link</span><br><span class="line">    google_plus: </span><br><span class="line">navbar: # 导航栏</span><br><span class="line">    # 菜单（显示名称：对应文件夹）</span><br><span class="line">    menu:</span><br><span class="line">        主页: / </span><br><span class="line">        归档: /archives  </span><br><span class="line">        分类: /categories </span><br><span class="line">        标签: /tags  </span><br><span class="line">        关于我: /about </span><br><span class="line">    # github账号</span><br><span class="line">     links:</span><br><span class="line">         Download on GitHub:</span><br><span class="line">             icon: fab fa-github</span><br><span class="line">             url: <span class="string">'https://github.com/ppoffice/hexo-theme-icarus'</span></span><br><span class="line"># 页脚图标链接</span><br><span class="line">footer:</span><br><span class="line">    # Links to be shown on the right of the footer section</span><br><span class="line">    links:</span><br><span class="line">        Creative Commons:</span><br><span class="line">            icon: fab fa-creative-commons</span><br><span class="line">            url: <span class="string">'https://creativecommons.org/'</span></span><br><span class="line">        Attribution <span class="number">4.0</span> International:</span><br><span class="line">            icon: fab fa-creative-commons-by</span><br><span class="line">            url: <span class="string">'https://creativecommons.org/licenses/by/4.0/'</span></span><br><span class="line">        Download on GitHub:</span><br><span class="line">            icon: fab fa-github</span><br><span class="line">            url: <span class="string">'https://github.com/ppoffice/hexo-theme-icarus'</span></span><br><span class="line"># 文章显示设置</span><br><span class="line">article:</span><br><span class="line">    # Code highlight settings</span><br><span class="line">    highlight:</span><br><span class="line">        theme: atom-one-light # 代码主题atom-one-light亮色，atom-one-dark暗色</span><br><span class="line">        clipboard: true #  显示代码copy按钮 </span><br><span class="line">        # Default folding status of the code blocks. Can be "", "folded", "unfolded"</span><br><span class="line">        fold: unfolded</span><br><span class="line">    thumbnail: true #  是否显示文章主图</span><br><span class="line">    readtime: true #  是否显示估算阅读时间</span><br><span class="line"># Search plugin settings  搜索插件设置</span><br><span class="line">search:</span><br><span class="line">    type: insight # 插件名</span><br><span class="line"># 评论插件设置</span><br><span class="line">comment:</span><br><span class="line">    #可选valine，disqus（科学上网）等</span><br><span class="line">    # Name of the comment plugin</span><br><span class="line">    #type: valine</span><br><span class="line">    #app_id: 不为空</span><br><span class="line">    #app_key: 不为空</span><br><span class="line">    #notify: true</span><br><span class="line">    #verify: true</span><br><span class="line">    #placeholder:</span><br><span class="line">    # Name of the comment plugin</span><br><span class="line">    type: </span><br><span class="line"># Donation entries 打赏功能</span><br><span class="line">donate:</span><br><span class="line">    -</span><br><span class="line">        type: alipay # 支付宝</span><br><span class="line">        qrcode: '/' # 支付宝图片URL</span><br><span class="line">    -</span><br><span class="line">        type: alipay # 微信</span><br><span class="line">        qrcode: '/' # 微信图片URL</span><br><span class="line">    -</span><br><span class="line"># 分享插件设置</span><br><span class="line">share:</span><br><span class="line">    # Share plugin name 插件类型，有多种，可选，自行百度</span><br><span class="line">    type: </span><br><span class="line"># Sidebar settings.</span><br><span class="line">sidebar:</span><br><span class="line">    # left sidebar settings 左侧边栏设置</span><br><span class="line">    left:</span><br><span class="line">        # 是否不随页面滚动 </span><br><span class="line">        sticky: <span class="keyword">true</span></span><br><span class="line">    # right sidebar settings 右侧边栏设置</span><br><span class="line">    right:</span><br><span class="line">        sticky: <span class="keyword">false</span></span><br><span class="line"># Sidebar widget settings  边栏小部件设置</span><br><span class="line">widgets:</span><br><span class="line">    -</span><br><span class="line">        type: profile # 个人信息</span><br><span class="line">        position: left  # 部件位置（左）</span><br><span class="line">        author: 程序熊猫 # 作者名（字符串） </span><br><span class="line">        author_title: Developer #作者身份描述（字符串）</span><br><span class="line">        location: 湖北·武汉 #作者当前居住地 </span><br><span class="line">        avatar: '/images/touXiang.jpeg'  #头像（可用本地图片或网络图片链接）</span><br><span class="line">        gravatar: # 要在配置文件小部件中显示的Gravatar的电子邮件地址</span><br><span class="line">        avatar_rounded: false  #显示圆形或方形的化身图像</span><br><span class="line">        follow_link: 'https://github.com/CodePandaes' #关注我的链接，可设为你的GitHub主页</span><br><span class="line">        #个人介绍部件底部图标社交链接</span><br><span class="line">        social_links:</span><br><span class="line">            Github:</span><br><span class="line">                icon: fab fa-github</span><br><span class="line">                url: <span class="string">'https://github.com/CodePandaes'</span></span><br><span class="line">            Facebook:</span><br><span class="line">                icon: fab fa-facebook</span><br><span class="line">                url: <span class="string">'https://facebook.com'</span></span><br><span class="line">            # Twitter:</span><br><span class="line">                # icon: fab fa-twitter</span><br><span class="line">                # url: 'https://twitter.com'</span><br><span class="line">            # Dribbble:</span><br><span class="line">                # icon: fab fa-dribbble</span><br><span class="line">                # url: 'https://dribbble.com'</span><br><span class="line">            # RSS:</span><br><span class="line">                # icon: fas fa-rss</span><br><span class="line">                # url: /</span><br><span class="line">    -</span><br><span class="line">        # Widget name 组件toc</span><br><span class="line">        type: toc</span><br><span class="line">        # Where should the widget be placed, left or right</span><br><span class="line">        position: left</span><br><span class="line">    -</span><br><span class="line">        # Widget name 标签</span><br><span class="line">        type: tag</span><br><span class="line">        # Where should the widget be placed, left or right</span><br><span class="line">        position: right</span><br><span class="line">    -</span><br><span class="line">        # Widget name 分类</span><br><span class="line">        type: category</span><br><span class="line">        # Where should the widget be placed, left or right</span><br><span class="line">        position: right</span><br><span class="line">    -</span><br><span class="line">        # Widget name 标签云</span><br><span class="line">        type: tagcloud</span><br><span class="line">        # Where should the widget be placed, left or right</span><br><span class="line">        position: right</span><br><span class="line">    -</span><br><span class="line">        # Widget name 近期文章</span><br><span class="line">        type: recent_posts</span><br><span class="line">        # Where should the widget be placed, left or right</span><br><span class="line">        position: left</span><br><span class="line">    -</span><br><span class="line">        # Widget name 归档</span><br><span class="line">        type: archive</span><br><span class="line">        # Where should the widget be placed, left or right</span><br><span class="line">        position: right</span><br><span class="line">    -</span><br><span class="line">        # Widget name 外部链接</span><br><span class="line">        type: links</span><br><span class="line">        # Where should the widget be placed, left or right</span><br><span class="line">        position: right</span><br><span class="line">        # Links to be shown in the links widget</span><br><span class="line">        links:</span><br><span class="line">            阮一峰的博客: <span class="string">'http://www.ruanyifeng.com/blog'</span></span><br><span class="line">            廖雪峰的博客: <span class="string">'http://www.liaoxuefeng.com'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Blog</tag>
        <tag>icarus</tag>
      </tags>
  </entry>
</search>
